{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/Status.js","components/ErrorBoundry.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","id","name","email","onClick","onHover","onExit","className","onMouseEnter","onMouseLeave","value","src","alt","CardList","robots","map","robot","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","children","Status","text","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchfield","target","onCardHover","style","cursor","robothover","currentTarget","getAttribute","onCardExit","onCardClick","robotName","deleteRobots","robotremove","push","fetch","then","response","json","users","filteredRobots","filter","toLowerCase","includes","length","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.04a88500.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react'\r\n\r\n\r\n\r\n\r\nconst Card = function({id, name, email, onClick, onHover, onExit}){\r\n    return(\r\n        \r\n        <div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5 tc' onMouseEnter={onHover} onClick={onClick} onMouseLeave={onExit} value={name}>\r\n            <img src={`https://robohash.org/${id}?200x200`} alt='robots'></img>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card","import React from 'react'\r\nimport Card from './Card.js'\r\n\r\n\r\nconst CardList = function ({robots, onClick, onHover, onExit}){\r\n    \r\n    return(\r\n        <div>\r\n            {\r\n                robots.map((robot, i) => {\r\n                    return <Card key= {i} id={robot.id} name={robot.name} email={robot.email} onClick={onClick} onHover={onHover} onExit={onExit}/>\r\n                    })\r\n            }  \r\n        </div>\r\n    );\r\n} \r\n\r\nexport default CardList","import React from 'react'\r\n\r\n\r\nconst SearchBox = function({searchChange}){\r\n    return (\r\n        <div>\r\n            <input className='pa3 ba b--green bg-lightest-blue' \r\n            type='search' \r\n            placeholder=\"Search Robot\"\r\n            onChange={searchChange}/>\r\n        </div>\r\n    )\r\n}\r\nexport default SearchBox","import React from 'react';\r\nimport './Scroll.css'\r\n\r\nconst Scroll = (props) =>{\r\n    return(\r\n        <div className='scroll'>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default Scroll","import React from 'react'\r\n\r\nconst Status = ({text})=>{\r\n\r\nreturn(\r\n    <div>\r\n        <h1>{text}</h1>\r\n    </div>\r\n)\r\n\r\n}\r\nexport default Status","import React, {Component} from 'react'\r\n\r\nclass ErrorBoundry extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info){\r\n        this.setState({ hasError: true})\r\n    }\r\n\r\n    render(){\r\n        if (this.state.hasError){\r\n            return <h1>OOOPs, this is not good</h1>\r\n        }\r\n        return this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry","import React, {Component}from 'react'\r\nimport CardList from '../components/CardList.js'\r\nimport SearchBox from '../components/SearchBox'\r\nimport './App.css'\r\nimport Scroll from '../components/Scroll'\r\nimport Status from '../components/Status'\r\nimport ErrorBoundry from '../components/ErrorBoundry'\r\n\r\nclass App extends Component{\r\n\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            robots: [],\r\n            searchfield: '',\r\n            robotremove: [],\r\n            robothover:'Click on any robot to delete it'\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response=> response.json())\r\n        .then(users => {this.setState({robots:users})});\r\n\r\n    }\r\n\r\n    onSearchChange = (event) =>{\r\n        this.setState({\r\n            searchfield: event.target.value\r\n        })\r\n    }\r\n\r\n    onCardHover = (event) =>{\r\n        event.target.style.cursor = 'pointer';\r\n        // event.target.classList.add('tooltiptext')\r\n        this.setState({\r\n            robothover: `You Are About To Delete : ${event.currentTarget.getAttribute('value')} !!!! `\r\n        })\r\n        \r\n    }\r\n\r\n    onCardExit = (event) =>{\r\n        this.setState({\r\n            robothover: \"Click on any robot to delete it\"\r\n        })\r\n    }\r\n\r\n    onCardClick = (event) =>{\r\n        const robotName = event.currentTarget.getAttribute('value');\r\n        let deleteRobots = this.state.robotremove;\r\n        deleteRobots.push(robotName);\r\n        \r\n        this.setState({\r\n            robotremove:deleteRobots\r\n        })\r\n    }\r\n\r\n    render(){\r\n        const {robots, searchfield, robotremove, robothover} = this.state;\r\n        const filteredRobots = robots.filter((robot) => {\r\n            return (robot.name.toLowerCase().includes(searchfield.toLowerCase()) && !(robotremove.includes(robot.name)))\r\n        })\r\n       return !robots.length?\r\n        <h1 className='f1'>LOADING</h1>:\r\n        (\r\n            <div className='tc'>\r\n                <h1 className='f1'>Robofriends</h1>\r\n                <Status text={robothover}/>\r\n                <SearchBox searchChange={this.onSearchChange}/>\r\n                <Scroll>\r\n                    <ErrorBoundry>\r\n                        <CardList robots = {filteredRobots} onClick={this.onCardClick} onHover={this.onCardHover} onExit={this.onCardExit}/>\r\n                    </ErrorBoundry>\r\n                    \r\n                </Scroll>\r\n                \r\n            </div>\r\n    \r\n        );\r\n        \r\n        \r\n        \r\n    }\r\n    \r\n}\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons'\r\nimport App from './containers/App.js'\r\n\r\n\r\nReactDOM.render(\r\n    <div>\r\n        <App robots/>\r\n    </div>\r\n\r\n\r\n, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}